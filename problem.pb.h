// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: problem.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_problem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_problem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_problem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_problem_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_problem_2eproto;
namespace problem {
class Capacity;
class CapacityDefaultTypeInternal;
extern CapacityDefaultTypeInternal _Capacity_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Matrix;
class MatrixDefaultTypeInternal;
extern MatrixDefaultTypeInternal _Matrix_default_instance_;
class Problem;
class ProblemDefaultTypeInternal;
extern ProblemDefaultTypeInternal _Problem_default_instance_;
class Service;
class ServiceDefaultTypeInternal;
extern ServiceDefaultTypeInternal _Service_default_instance_;
class Solution;
class SolutionDefaultTypeInternal;
extern SolutionDefaultTypeInternal _Solution_default_instance_;
class Vehicle;
class VehicleDefaultTypeInternal;
extern VehicleDefaultTypeInternal _Vehicle_default_instance_;
}  // namespace problem
PROTOBUF_NAMESPACE_OPEN
template<> ::problem::Capacity* Arena::CreateMaybeMessage<::problem::Capacity>(Arena*);
template<> ::problem::Location* Arena::CreateMaybeMessage<::problem::Location>(Arena*);
template<> ::problem::Matrix* Arena::CreateMaybeMessage<::problem::Matrix>(Arena*);
template<> ::problem::Problem* Arena::CreateMaybeMessage<::problem::Problem>(Arena*);
template<> ::problem::Service* Arena::CreateMaybeMessage<::problem::Service>(Arena*);
template<> ::problem::Solution* Arena::CreateMaybeMessage<::problem::Solution>(Arena*);
template<> ::problem::Vehicle* Arena::CreateMaybeMessage<::problem::Vehicle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace problem {

// ===================================================================

class Matrix :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:problem.Matrix) */ {
 public:
  Matrix();
  virtual ~Matrix();

  Matrix(const Matrix& from);
  Matrix(Matrix&& from) noexcept
    : Matrix() {
    *this = ::std::move(from);
  }

  inline Matrix& operator=(const Matrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix& operator=(Matrix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Matrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Matrix* internal_default_instance() {
    return reinterpret_cast<const Matrix*>(
               &_Matrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Matrix& a, Matrix& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Matrix* New() const final {
    return CreateMaybeMessage<Matrix>(nullptr);
  }

  Matrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Matrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Matrix& from);
  void MergeFrom(const Matrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "problem.Matrix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_problem_2eproto);
    return ::descriptor_table_problem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kDistanceFieldNumber = 2,
  };
  // repeated float time = 1 [packed = true];
  int time_size() const;
  private:
  int _internal_time_size() const;
  public:
  void clear_time();
  private:
  float _internal_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_time() const;
  void _internal_add_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_time();
  public:
  float time(int index) const;
  void set_time(int index, float value);
  void add_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_time();

  // repeated float distance = 2 [packed = true];
  int distance_size() const;
  private:
  int _internal_distance_size() const;
  public:
  void clear_distance();
  private:
  float _internal_distance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_distance() const;
  void _internal_add_distance(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_distance();
  public:
  float distance(int index) const;
  void set_distance(int index, float value);
  void add_distance(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      distance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_distance();

  // @@protoc_insertion_point(class_scope:problem.Matrix)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > time_;
  mutable std::atomic<int> _time_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > distance_;
  mutable std::atomic<int> _distance_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_problem_2eproto;
};
// -------------------------------------------------------------------

class Location :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:problem.Location) */ {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const final {
    return CreateMaybeMessage<Location>(nullptr);
  }

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "problem.Location";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_problem_2eproto);
    return ::descriptor_table_problem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kMatrixIndexFieldNumber = 3,
  };
  // double longitude = 1;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // uint32 matrix_index = 3;
  void clear_matrix_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 matrix_index() const;
  void set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matrix_index() const;
  void _internal_set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:problem.Location)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double longitude_;
  double latitude_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matrix_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_problem_2eproto;
};
// -------------------------------------------------------------------

class Service :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:problem.Service) */ {
 public:
  Service();
  virtual ~Service();

  Service(const Service& from);
  Service(Service&& from) noexcept
    : Service() {
    *this = ::std::move(from);
  }

  inline Service& operator=(const Service& from) {
    CopyFrom(from);
    return *this;
  }
  inline Service& operator=(Service&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Service& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Service* internal_default_instance() {
    return reinterpret_cast<const Service*>(
               &_Service_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Service& a, Service& b) {
    a.Swap(&b);
  }
  inline void Swap(Service* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Service* New() const final {
    return CreateMaybeMessage<Service>(nullptr);
  }

  Service* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Service>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Service& from);
  void MergeFrom(const Service& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Service* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "problem.Service";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_problem_2eproto);
    return ::descriptor_table_problem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuantitiesFieldNumber = 1,
    kCompatibleVehicleIndicesFieldNumber = 4,
    kSkillsFieldNumber = 5,
    kDayIndicesFieldNumber = 6,
    kUnitLabelsFieldNumber = 11,
    kNameFieldNumber = 9,
    kLocationFieldNumber = 7,
    kDurationFieldNumber = 2,
    kMatrixIndexFieldNumber = 3,
    kIdFieldNumber = 10,
  };
  // repeated float quantities = 1;
  int quantities_size() const;
  private:
  int _internal_quantities_size() const;
  public:
  void clear_quantities();
  private:
  float _internal_quantities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_quantities() const;
  void _internal_add_quantities(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_quantities();
  public:
  float quantities(int index) const;
  void set_quantities(int index, float value);
  void add_quantities(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      quantities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_quantities();

  // repeated uint32 compatible_vehicle_indices = 4;
  int compatible_vehicle_indices_size() const;
  private:
  int _internal_compatible_vehicle_indices_size() const;
  public:
  void clear_compatible_vehicle_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_compatible_vehicle_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_compatible_vehicle_indices() const;
  void _internal_add_compatible_vehicle_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_compatible_vehicle_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 compatible_vehicle_indices(int index) const;
  void set_compatible_vehicle_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_compatible_vehicle_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      compatible_vehicle_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_compatible_vehicle_indices();

  // repeated string skills = 5;
  int skills_size() const;
  private:
  int _internal_skills_size() const;
  public:
  void clear_skills();
  const std::string& skills(int index) const;
  std::string* mutable_skills(int index);
  void set_skills(int index, const std::string& value);
  void set_skills(int index, std::string&& value);
  void set_skills(int index, const char* value);
  void set_skills(int index, const char* value, size_t size);
  std::string* add_skills();
  void add_skills(const std::string& value);
  void add_skills(std::string&& value);
  void add_skills(const char* value);
  void add_skills(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& skills() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_skills();
  private:
  const std::string& _internal_skills(int index) const;
  std::string* _internal_add_skills();
  public:

  // repeated int32 day_indices = 6;
  int day_indices_size() const;
  private:
  int _internal_day_indices_size() const;
  public:
  void clear_day_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_day_indices() const;
  void _internal_add_day_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_day_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 day_indices(int index) const;
  void set_day_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_day_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      day_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_day_indices();

  // repeated string unit_labels = 11;
  int unit_labels_size() const;
  private:
  int _internal_unit_labels_size() const;
  public:
  void clear_unit_labels();
  const std::string& unit_labels(int index) const;
  std::string* mutable_unit_labels(int index);
  void set_unit_labels(int index, const std::string& value);
  void set_unit_labels(int index, std::string&& value);
  void set_unit_labels(int index, const char* value);
  void set_unit_labels(int index, const char* value, size_t size);
  std::string* add_unit_labels();
  void add_unit_labels(const std::string& value);
  void add_unit_labels(std::string&& value);
  void add_unit_labels(const char* value);
  void add_unit_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& unit_labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_unit_labels();
  private:
  const std::string& _internal_unit_labels(int index) const;
  std::string* _internal_add_unit_labels();
  public:

  // string name = 9;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .problem.Location location = 7;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::problem::Location& location() const;
  ::problem::Location* release_location();
  ::problem::Location* mutable_location();
  void set_allocated_location(::problem::Location* location);
  private:
  const ::problem::Location& _internal_location() const;
  ::problem::Location* _internal_mutable_location();
  public:

  // float duration = 2;
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // uint32 matrix_index = 3;
  void clear_matrix_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 matrix_index() const;
  void set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matrix_index() const;
  void _internal_set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 id = 10;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:problem.Service)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > quantities_;
  mutable std::atomic<int> _quantities_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > compatible_vehicle_indices_;
  mutable std::atomic<int> _compatible_vehicle_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> skills_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > day_indices_;
  mutable std::atomic<int> _day_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> unit_labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::problem::Location* location_;
  float duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matrix_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_problem_2eproto;
};
// -------------------------------------------------------------------

class Capacity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:problem.Capacity) */ {
 public:
  Capacity();
  virtual ~Capacity();

  Capacity(const Capacity& from);
  Capacity(Capacity&& from) noexcept
    : Capacity() {
    *this = ::std::move(from);
  }

  inline Capacity& operator=(const Capacity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Capacity& operator=(Capacity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Capacity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Capacity* internal_default_instance() {
    return reinterpret_cast<const Capacity*>(
               &_Capacity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Capacity& a, Capacity& b) {
    a.Swap(&b);
  }
  inline void Swap(Capacity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Capacity* New() const final {
    return CreateMaybeMessage<Capacity>(nullptr);
  }

  Capacity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Capacity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Capacity& from);
  void MergeFrom(const Capacity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Capacity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "problem.Capacity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_problem_2eproto);
    return ::descriptor_table_problem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFieldNumber = 1,
  };
  // float limit = 1;
  void clear_limit();
  float limit() const;
  void set_limit(float value);
  private:
  float _internal_limit() const;
  void _internal_set_limit(float value);
  public:

  // @@protoc_insertion_point(class_scope:problem.Capacity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_problem_2eproto;
};
// -------------------------------------------------------------------

class Vehicle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:problem.Vehicle) */ {
 public:
  Vehicle();
  virtual ~Vehicle();

  Vehicle(const Vehicle& from);
  Vehicle(Vehicle&& from) noexcept
    : Vehicle() {
    *this = ::std::move(from);
  }

  inline Vehicle& operator=(const Vehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vehicle& operator=(Vehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vehicle* internal_default_instance() {
    return reinterpret_cast<const Vehicle*>(
               &_Vehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Vehicle& a, Vehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(Vehicle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vehicle* New() const final {
    return CreateMaybeMessage<Vehicle>(nullptr);
  }

  Vehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vehicle& from);
  void MergeFrom(const Vehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "problem.Vehicle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_problem_2eproto);
    return ::descriptor_table_problem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapacitiesFieldNumber = 2,
    kDayIndicesFieldNumber = 7,
    kSkillsFieldNumber = 9,
    kNameFieldNumber = 1,
    kStartLocationFieldNumber = 4,
    kEndLocationFieldNumber = 5,
    kDurationFieldNumber = 6,
    kMatrixIndexFieldNumber = 8,
    kIdFieldNumber = 10,
  };
  // repeated .problem.Capacity capacities = 2;
  int capacities_size() const;
  private:
  int _internal_capacities_size() const;
  public:
  void clear_capacities();
  ::problem::Capacity* mutable_capacities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Capacity >*
      mutable_capacities();
  private:
  const ::problem::Capacity& _internal_capacities(int index) const;
  ::problem::Capacity* _internal_add_capacities();
  public:
  const ::problem::Capacity& capacities(int index) const;
  ::problem::Capacity* add_capacities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Capacity >&
      capacities() const;

  // repeated int32 day_indices = 7;
  int day_indices_size() const;
  private:
  int _internal_day_indices_size() const;
  public:
  void clear_day_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_day_indices() const;
  void _internal_add_day_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_day_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 day_indices(int index) const;
  void set_day_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_day_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      day_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_day_indices();

  // repeated string skills = 9;
  int skills_size() const;
  private:
  int _internal_skills_size() const;
  public:
  void clear_skills();
  const std::string& skills(int index) const;
  std::string* mutable_skills(int index);
  void set_skills(int index, const std::string& value);
  void set_skills(int index, std::string&& value);
  void set_skills(int index, const char* value);
  void set_skills(int index, const char* value, size_t size);
  std::string* add_skills();
  void add_skills(const std::string& value);
  void add_skills(std::string&& value);
  void add_skills(const char* value);
  void add_skills(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& skills() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_skills();
  private:
  const std::string& _internal_skills(int index) const;
  std::string* _internal_add_skills();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .problem.Location start_location = 4;
  bool has_start_location() const;
  private:
  bool _internal_has_start_location() const;
  public:
  void clear_start_location();
  const ::problem::Location& start_location() const;
  ::problem::Location* release_start_location();
  ::problem::Location* mutable_start_location();
  void set_allocated_start_location(::problem::Location* start_location);
  private:
  const ::problem::Location& _internal_start_location() const;
  ::problem::Location* _internal_mutable_start_location();
  public:

  // .problem.Location end_location = 5;
  bool has_end_location() const;
  private:
  bool _internal_has_end_location() const;
  public:
  void clear_end_location();
  const ::problem::Location& end_location() const;
  ::problem::Location* release_end_location();
  ::problem::Location* mutable_end_location();
  void set_allocated_end_location(::problem::Location* end_location);
  private:
  const ::problem::Location& _internal_end_location() const;
  ::problem::Location* _internal_mutable_end_location();
  public:

  // double duration = 6;
  void clear_duration();
  double duration() const;
  void set_duration(double value);
  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);
  public:

  // uint32 matrix_index = 8;
  void clear_matrix_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 matrix_index() const;
  void set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matrix_index() const;
  void _internal_set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 id = 10;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:problem.Vehicle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Capacity > capacities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > day_indices_;
  mutable std::atomic<int> _day_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> skills_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::problem::Location* start_location_;
  ::problem::Location* end_location_;
  double duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matrix_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_problem_2eproto;
};
// -------------------------------------------------------------------

class Solution :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:problem.Solution) */ {
 public:
  Solution();
  virtual ~Solution();

  Solution(const Solution& from);
  Solution(Solution&& from) noexcept
    : Solution() {
    *this = ::std::move(from);
  }

  inline Solution& operator=(const Solution& from) {
    CopyFrom(from);
    return *this;
  }
  inline Solution& operator=(Solution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Solution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Solution* internal_default_instance() {
    return reinterpret_cast<const Solution*>(
               &_Solution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Solution& a, Solution& b) {
    a.Swap(&b);
  }
  inline void Swap(Solution* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Solution* New() const final {
    return CreateMaybeMessage<Solution>(nullptr);
  }

  Solution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Solution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Solution& from);
  void MergeFrom(const Solution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Solution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "problem.Solution";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_problem_2eproto);
    return ::descriptor_table_problem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentFieldNumber = 1,
  };
  // repeated int32 assignment = 1;
  int assignment_size() const;
  private:
  int _internal_assignment_size() const;
  public:
  void clear_assignment();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_assignment(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_assignment() const;
  void _internal_add_assignment(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_assignment();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 assignment(int index) const;
  void set_assignment(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_assignment(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      assignment() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_assignment();

  // @@protoc_insertion_point(class_scope:problem.Solution)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > assignment_;
  mutable std::atomic<int> _assignment_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_problem_2eproto;
};
// -------------------------------------------------------------------

class Problem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:problem.Problem) */ {
 public:
  Problem();
  virtual ~Problem();

  Problem(const Problem& from);
  Problem(Problem&& from) noexcept
    : Problem() {
    *this = ::std::move(from);
  }

  inline Problem& operator=(const Problem& from) {
    CopyFrom(from);
    return *this;
  }
  inline Problem& operator=(Problem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Problem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Problem* internal_default_instance() {
    return reinterpret_cast<const Problem*>(
               &_Problem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Problem& a, Problem& b) {
    a.Swap(&b);
  }
  inline void Swap(Problem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Problem* New() const final {
    return CreateMaybeMessage<Problem>(nullptr);
  }

  Problem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Problem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Problem& from);
  void MergeFrom(const Problem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Problem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "problem.Problem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_problem_2eproto);
    return ::descriptor_table_problem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehiclesFieldNumber = 1,
    kServicesFieldNumber = 2,
    kMatricesFieldNumber = 3,
    kUnitLabelsFieldNumber = 5,
    kSolutionsFieldNumber = 4,
  };
  // repeated .problem.Vehicle vehicles = 1;
  int vehicles_size() const;
  private:
  int _internal_vehicles_size() const;
  public:
  void clear_vehicles();
  ::problem::Vehicle* mutable_vehicles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Vehicle >*
      mutable_vehicles();
  private:
  const ::problem::Vehicle& _internal_vehicles(int index) const;
  ::problem::Vehicle* _internal_add_vehicles();
  public:
  const ::problem::Vehicle& vehicles(int index) const;
  ::problem::Vehicle* add_vehicles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Vehicle >&
      vehicles() const;

  // repeated .problem.Service services = 2;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  ::problem::Service* mutable_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Service >*
      mutable_services();
  private:
  const ::problem::Service& _internal_services(int index) const;
  ::problem::Service* _internal_add_services();
  public:
  const ::problem::Service& services(int index) const;
  ::problem::Service* add_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Service >&
      services() const;

  // repeated .problem.Matrix matrices = 3;
  int matrices_size() const;
  private:
  int _internal_matrices_size() const;
  public:
  void clear_matrices();
  ::problem::Matrix* mutable_matrices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Matrix >*
      mutable_matrices();
  private:
  const ::problem::Matrix& _internal_matrices(int index) const;
  ::problem::Matrix* _internal_add_matrices();
  public:
  const ::problem::Matrix& matrices(int index) const;
  ::problem::Matrix* add_matrices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Matrix >&
      matrices() const;

  // repeated string unit_labels = 5;
  int unit_labels_size() const;
  private:
  int _internal_unit_labels_size() const;
  public:
  void clear_unit_labels();
  const std::string& unit_labels(int index) const;
  std::string* mutable_unit_labels(int index);
  void set_unit_labels(int index, const std::string& value);
  void set_unit_labels(int index, std::string&& value);
  void set_unit_labels(int index, const char* value);
  void set_unit_labels(int index, const char* value, size_t size);
  std::string* add_unit_labels();
  void add_unit_labels(const std::string& value);
  void add_unit_labels(std::string&& value);
  void add_unit_labels(const char* value);
  void add_unit_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& unit_labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_unit_labels();
  private:
  const std::string& _internal_unit_labels(int index) const;
  std::string* _internal_add_unit_labels();
  public:

  // .problem.Solution solutions = 4;
  bool has_solutions() const;
  private:
  bool _internal_has_solutions() const;
  public:
  void clear_solutions();
  const ::problem::Solution& solutions() const;
  ::problem::Solution* release_solutions();
  ::problem::Solution* mutable_solutions();
  void set_allocated_solutions(::problem::Solution* solutions);
  private:
  const ::problem::Solution& _internal_solutions() const;
  ::problem::Solution* _internal_mutable_solutions();
  public:

  // @@protoc_insertion_point(class_scope:problem.Problem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Vehicle > vehicles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Service > services_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Matrix > matrices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> unit_labels_;
  ::problem::Solution* solutions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_problem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Matrix

// repeated float time = 1 [packed = true];
inline int Matrix::_internal_time_size() const {
  return time_.size();
}
inline int Matrix::time_size() const {
  return _internal_time_size();
}
inline void Matrix::clear_time() {
  time_.Clear();
}
inline float Matrix::_internal_time(int index) const {
  return time_.Get(index);
}
inline float Matrix::time(int index) const {
  // @@protoc_insertion_point(field_get:problem.Matrix.time)
  return _internal_time(index);
}
inline void Matrix::set_time(int index, float value) {
  time_.Set(index, value);
  // @@protoc_insertion_point(field_set:problem.Matrix.time)
}
inline void Matrix::_internal_add_time(float value) {
  time_.Add(value);
}
inline void Matrix::add_time(float value) {
  _internal_add_time(value);
  // @@protoc_insertion_point(field_add:problem.Matrix.time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Matrix::_internal_time() const {
  return time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Matrix::time() const {
  // @@protoc_insertion_point(field_list:problem.Matrix.time)
  return _internal_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Matrix::_internal_mutable_time() {
  return &time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Matrix::mutable_time() {
  // @@protoc_insertion_point(field_mutable_list:problem.Matrix.time)
  return _internal_mutable_time();
}

// repeated float distance = 2 [packed = true];
inline int Matrix::_internal_distance_size() const {
  return distance_.size();
}
inline int Matrix::distance_size() const {
  return _internal_distance_size();
}
inline void Matrix::clear_distance() {
  distance_.Clear();
}
inline float Matrix::_internal_distance(int index) const {
  return distance_.Get(index);
}
inline float Matrix::distance(int index) const {
  // @@protoc_insertion_point(field_get:problem.Matrix.distance)
  return _internal_distance(index);
}
inline void Matrix::set_distance(int index, float value) {
  distance_.Set(index, value);
  // @@protoc_insertion_point(field_set:problem.Matrix.distance)
}
inline void Matrix::_internal_add_distance(float value) {
  distance_.Add(value);
}
inline void Matrix::add_distance(float value) {
  _internal_add_distance(value);
  // @@protoc_insertion_point(field_add:problem.Matrix.distance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Matrix::_internal_distance() const {
  return distance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Matrix::distance() const {
  // @@protoc_insertion_point(field_list:problem.Matrix.distance)
  return _internal_distance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Matrix::_internal_mutable_distance() {
  return &distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Matrix::mutable_distance() {
  // @@protoc_insertion_point(field_mutable_list:problem.Matrix.distance)
  return _internal_mutable_distance();
}

// -------------------------------------------------------------------

// Location

// double longitude = 1;
inline void Location::clear_longitude() {
  longitude_ = 0;
}
inline double Location::_internal_longitude() const {
  return longitude_;
}
inline double Location::longitude() const {
  // @@protoc_insertion_point(field_get:problem.Location.longitude)
  return _internal_longitude();
}
inline void Location::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void Location::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:problem.Location.longitude)
}

// double latitude = 2;
inline void Location::clear_latitude() {
  latitude_ = 0;
}
inline double Location::_internal_latitude() const {
  return latitude_;
}
inline double Location::latitude() const {
  // @@protoc_insertion_point(field_get:problem.Location.latitude)
  return _internal_latitude();
}
inline void Location::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void Location::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:problem.Location.latitude)
}

// uint32 matrix_index = 3;
inline void Location::clear_matrix_index() {
  matrix_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Location::_internal_matrix_index() const {
  return matrix_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Location::matrix_index() const {
  // @@protoc_insertion_point(field_get:problem.Location.matrix_index)
  return _internal_matrix_index();
}
inline void Location::_internal_set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  matrix_index_ = value;
}
inline void Location::set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matrix_index(value);
  // @@protoc_insertion_point(field_set:problem.Location.matrix_index)
}

// -------------------------------------------------------------------

// Service

// repeated float quantities = 1;
inline int Service::_internal_quantities_size() const {
  return quantities_.size();
}
inline int Service::quantities_size() const {
  return _internal_quantities_size();
}
inline void Service::clear_quantities() {
  quantities_.Clear();
}
inline float Service::_internal_quantities(int index) const {
  return quantities_.Get(index);
}
inline float Service::quantities(int index) const {
  // @@protoc_insertion_point(field_get:problem.Service.quantities)
  return _internal_quantities(index);
}
inline void Service::set_quantities(int index, float value) {
  quantities_.Set(index, value);
  // @@protoc_insertion_point(field_set:problem.Service.quantities)
}
inline void Service::_internal_add_quantities(float value) {
  quantities_.Add(value);
}
inline void Service::add_quantities(float value) {
  _internal_add_quantities(value);
  // @@protoc_insertion_point(field_add:problem.Service.quantities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Service::_internal_quantities() const {
  return quantities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Service::quantities() const {
  // @@protoc_insertion_point(field_list:problem.Service.quantities)
  return _internal_quantities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Service::_internal_mutable_quantities() {
  return &quantities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Service::mutable_quantities() {
  // @@protoc_insertion_point(field_mutable_list:problem.Service.quantities)
  return _internal_mutable_quantities();
}

// float duration = 2;
inline void Service::clear_duration() {
  duration_ = 0;
}
inline float Service::_internal_duration() const {
  return duration_;
}
inline float Service::duration() const {
  // @@protoc_insertion_point(field_get:problem.Service.duration)
  return _internal_duration();
}
inline void Service::_internal_set_duration(float value) {
  
  duration_ = value;
}
inline void Service::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:problem.Service.duration)
}

// uint32 matrix_index = 3;
inline void Service::clear_matrix_index() {
  matrix_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::_internal_matrix_index() const {
  return matrix_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::matrix_index() const {
  // @@protoc_insertion_point(field_get:problem.Service.matrix_index)
  return _internal_matrix_index();
}
inline void Service::_internal_set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  matrix_index_ = value;
}
inline void Service::set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matrix_index(value);
  // @@protoc_insertion_point(field_set:problem.Service.matrix_index)
}

// repeated uint32 compatible_vehicle_indices = 4;
inline int Service::_internal_compatible_vehicle_indices_size() const {
  return compatible_vehicle_indices_.size();
}
inline int Service::compatible_vehicle_indices_size() const {
  return _internal_compatible_vehicle_indices_size();
}
inline void Service::clear_compatible_vehicle_indices() {
  compatible_vehicle_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::_internal_compatible_vehicle_indices(int index) const {
  return compatible_vehicle_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::compatible_vehicle_indices(int index) const {
  // @@protoc_insertion_point(field_get:problem.Service.compatible_vehicle_indices)
  return _internal_compatible_vehicle_indices(index);
}
inline void Service::set_compatible_vehicle_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  compatible_vehicle_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:problem.Service.compatible_vehicle_indices)
}
inline void Service::_internal_add_compatible_vehicle_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  compatible_vehicle_indices_.Add(value);
}
inline void Service::add_compatible_vehicle_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_compatible_vehicle_indices(value);
  // @@protoc_insertion_point(field_add:problem.Service.compatible_vehicle_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Service::_internal_compatible_vehicle_indices() const {
  return compatible_vehicle_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Service::compatible_vehicle_indices() const {
  // @@protoc_insertion_point(field_list:problem.Service.compatible_vehicle_indices)
  return _internal_compatible_vehicle_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Service::_internal_mutable_compatible_vehicle_indices() {
  return &compatible_vehicle_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Service::mutable_compatible_vehicle_indices() {
  // @@protoc_insertion_point(field_mutable_list:problem.Service.compatible_vehicle_indices)
  return _internal_mutable_compatible_vehicle_indices();
}

// repeated string skills = 5;
inline int Service::_internal_skills_size() const {
  return skills_.size();
}
inline int Service::skills_size() const {
  return _internal_skills_size();
}
inline void Service::clear_skills() {
  skills_.Clear();
}
inline std::string* Service::add_skills() {
  // @@protoc_insertion_point(field_add_mutable:problem.Service.skills)
  return _internal_add_skills();
}
inline const std::string& Service::_internal_skills(int index) const {
  return skills_.Get(index);
}
inline const std::string& Service::skills(int index) const {
  // @@protoc_insertion_point(field_get:problem.Service.skills)
  return _internal_skills(index);
}
inline std::string* Service::mutable_skills(int index) {
  // @@protoc_insertion_point(field_mutable:problem.Service.skills)
  return skills_.Mutable(index);
}
inline void Service::set_skills(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:problem.Service.skills)
  skills_.Mutable(index)->assign(value);
}
inline void Service::set_skills(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:problem.Service.skills)
  skills_.Mutable(index)->assign(std::move(value));
}
inline void Service::set_skills(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  skills_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:problem.Service.skills)
}
inline void Service::set_skills(int index, const char* value, size_t size) {
  skills_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:problem.Service.skills)
}
inline std::string* Service::_internal_add_skills() {
  return skills_.Add();
}
inline void Service::add_skills(const std::string& value) {
  skills_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:problem.Service.skills)
}
inline void Service::add_skills(std::string&& value) {
  skills_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:problem.Service.skills)
}
inline void Service::add_skills(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  skills_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:problem.Service.skills)
}
inline void Service::add_skills(const char* value, size_t size) {
  skills_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:problem.Service.skills)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Service::skills() const {
  // @@protoc_insertion_point(field_list:problem.Service.skills)
  return skills_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Service::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:problem.Service.skills)
  return &skills_;
}

// repeated int32 day_indices = 6;
inline int Service::_internal_day_indices_size() const {
  return day_indices_.size();
}
inline int Service::day_indices_size() const {
  return _internal_day_indices_size();
}
inline void Service::clear_day_indices() {
  day_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Service::_internal_day_indices(int index) const {
  return day_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Service::day_indices(int index) const {
  // @@protoc_insertion_point(field_get:problem.Service.day_indices)
  return _internal_day_indices(index);
}
inline void Service::set_day_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  day_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:problem.Service.day_indices)
}
inline void Service::_internal_add_day_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  day_indices_.Add(value);
}
inline void Service::add_day_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_day_indices(value);
  // @@protoc_insertion_point(field_add:problem.Service.day_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Service::_internal_day_indices() const {
  return day_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Service::day_indices() const {
  // @@protoc_insertion_point(field_list:problem.Service.day_indices)
  return _internal_day_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Service::_internal_mutable_day_indices() {
  return &day_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Service::mutable_day_indices() {
  // @@protoc_insertion_point(field_mutable_list:problem.Service.day_indices)
  return _internal_mutable_day_indices();
}

// .problem.Location location = 7;
inline bool Service::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool Service::has_location() const {
  return _internal_has_location();
}
inline void Service::clear_location() {
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::problem::Location& Service::_internal_location() const {
  const ::problem::Location* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::problem::Location*>(
      &::problem::_Location_default_instance_);
}
inline const ::problem::Location& Service::location() const {
  // @@protoc_insertion_point(field_get:problem.Service.location)
  return _internal_location();
}
inline ::problem::Location* Service::release_location() {
  // @@protoc_insertion_point(field_release:problem.Service.location)
  
  ::problem::Location* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::problem::Location* Service::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::problem::Location>(GetArenaNoVirtual());
    location_ = p;
  }
  return location_;
}
inline ::problem::Location* Service::mutable_location() {
  // @@protoc_insertion_point(field_mutable:problem.Service.location)
  return _internal_mutable_location();
}
inline void Service::set_allocated_location(::problem::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:problem.Service.location)
}

// string name = 9;
inline void Service::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Service::name() const {
  // @@protoc_insertion_point(field_get:problem.Service.name)
  return _internal_name();
}
inline void Service::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:problem.Service.name)
}
inline std::string* Service::mutable_name() {
  // @@protoc_insertion_point(field_mutable:problem.Service.name)
  return _internal_mutable_name();
}
inline const std::string& Service::_internal_name() const {
  return name_.GetNoArena();
}
inline void Service::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Service::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:problem.Service.name)
}
inline void Service::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:problem.Service.name)
}
inline void Service::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:problem.Service.name)
}
inline std::string* Service::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Service::release_name() {
  // @@protoc_insertion_point(field_release:problem.Service.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:problem.Service.name)
}

// uint32 id = 10;
inline void Service::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::id() const {
  // @@protoc_insertion_point(field_get:problem.Service.id)
  return _internal_id();
}
inline void Service::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Service::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:problem.Service.id)
}

// repeated string unit_labels = 11;
inline int Service::_internal_unit_labels_size() const {
  return unit_labels_.size();
}
inline int Service::unit_labels_size() const {
  return _internal_unit_labels_size();
}
inline void Service::clear_unit_labels() {
  unit_labels_.Clear();
}
inline std::string* Service::add_unit_labels() {
  // @@protoc_insertion_point(field_add_mutable:problem.Service.unit_labels)
  return _internal_add_unit_labels();
}
inline const std::string& Service::_internal_unit_labels(int index) const {
  return unit_labels_.Get(index);
}
inline const std::string& Service::unit_labels(int index) const {
  // @@protoc_insertion_point(field_get:problem.Service.unit_labels)
  return _internal_unit_labels(index);
}
inline std::string* Service::mutable_unit_labels(int index) {
  // @@protoc_insertion_point(field_mutable:problem.Service.unit_labels)
  return unit_labels_.Mutable(index);
}
inline void Service::set_unit_labels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:problem.Service.unit_labels)
  unit_labels_.Mutable(index)->assign(value);
}
inline void Service::set_unit_labels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:problem.Service.unit_labels)
  unit_labels_.Mutable(index)->assign(std::move(value));
}
inline void Service::set_unit_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unit_labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:problem.Service.unit_labels)
}
inline void Service::set_unit_labels(int index, const char* value, size_t size) {
  unit_labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:problem.Service.unit_labels)
}
inline std::string* Service::_internal_add_unit_labels() {
  return unit_labels_.Add();
}
inline void Service::add_unit_labels(const std::string& value) {
  unit_labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:problem.Service.unit_labels)
}
inline void Service::add_unit_labels(std::string&& value) {
  unit_labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:problem.Service.unit_labels)
}
inline void Service::add_unit_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unit_labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:problem.Service.unit_labels)
}
inline void Service::add_unit_labels(const char* value, size_t size) {
  unit_labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:problem.Service.unit_labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Service::unit_labels() const {
  // @@protoc_insertion_point(field_list:problem.Service.unit_labels)
  return unit_labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Service::mutable_unit_labels() {
  // @@protoc_insertion_point(field_mutable_list:problem.Service.unit_labels)
  return &unit_labels_;
}

// -------------------------------------------------------------------

// Capacity

// float limit = 1;
inline void Capacity::clear_limit() {
  limit_ = 0;
}
inline float Capacity::_internal_limit() const {
  return limit_;
}
inline float Capacity::limit() const {
  // @@protoc_insertion_point(field_get:problem.Capacity.limit)
  return _internal_limit();
}
inline void Capacity::_internal_set_limit(float value) {
  
  limit_ = value;
}
inline void Capacity::set_limit(float value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:problem.Capacity.limit)
}

// -------------------------------------------------------------------

// Vehicle

// string name = 1;
inline void Vehicle::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Vehicle::name() const {
  // @@protoc_insertion_point(field_get:problem.Vehicle.name)
  return _internal_name();
}
inline void Vehicle::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:problem.Vehicle.name)
}
inline std::string* Vehicle::mutable_name() {
  // @@protoc_insertion_point(field_mutable:problem.Vehicle.name)
  return _internal_mutable_name();
}
inline const std::string& Vehicle::_internal_name() const {
  return name_.GetNoArena();
}
inline void Vehicle::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Vehicle::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:problem.Vehicle.name)
}
inline void Vehicle::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:problem.Vehicle.name)
}
inline void Vehicle::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:problem.Vehicle.name)
}
inline std::string* Vehicle::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Vehicle::release_name() {
  // @@protoc_insertion_point(field_release:problem.Vehicle.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Vehicle::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:problem.Vehicle.name)
}

// repeated .problem.Capacity capacities = 2;
inline int Vehicle::_internal_capacities_size() const {
  return capacities_.size();
}
inline int Vehicle::capacities_size() const {
  return _internal_capacities_size();
}
inline void Vehicle::clear_capacities() {
  capacities_.Clear();
}
inline ::problem::Capacity* Vehicle::mutable_capacities(int index) {
  // @@protoc_insertion_point(field_mutable:problem.Vehicle.capacities)
  return capacities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Capacity >*
Vehicle::mutable_capacities() {
  // @@protoc_insertion_point(field_mutable_list:problem.Vehicle.capacities)
  return &capacities_;
}
inline const ::problem::Capacity& Vehicle::_internal_capacities(int index) const {
  return capacities_.Get(index);
}
inline const ::problem::Capacity& Vehicle::capacities(int index) const {
  // @@protoc_insertion_point(field_get:problem.Vehicle.capacities)
  return _internal_capacities(index);
}
inline ::problem::Capacity* Vehicle::_internal_add_capacities() {
  return capacities_.Add();
}
inline ::problem::Capacity* Vehicle::add_capacities() {
  // @@protoc_insertion_point(field_add:problem.Vehicle.capacities)
  return _internal_add_capacities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Capacity >&
Vehicle::capacities() const {
  // @@protoc_insertion_point(field_list:problem.Vehicle.capacities)
  return capacities_;
}

// .problem.Location start_location = 4;
inline bool Vehicle::_internal_has_start_location() const {
  return this != internal_default_instance() && start_location_ != nullptr;
}
inline bool Vehicle::has_start_location() const {
  return _internal_has_start_location();
}
inline void Vehicle::clear_start_location() {
  if (GetArenaNoVirtual() == nullptr && start_location_ != nullptr) {
    delete start_location_;
  }
  start_location_ = nullptr;
}
inline const ::problem::Location& Vehicle::_internal_start_location() const {
  const ::problem::Location* p = start_location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::problem::Location*>(
      &::problem::_Location_default_instance_);
}
inline const ::problem::Location& Vehicle::start_location() const {
  // @@protoc_insertion_point(field_get:problem.Vehicle.start_location)
  return _internal_start_location();
}
inline ::problem::Location* Vehicle::release_start_location() {
  // @@protoc_insertion_point(field_release:problem.Vehicle.start_location)
  
  ::problem::Location* temp = start_location_;
  start_location_ = nullptr;
  return temp;
}
inline ::problem::Location* Vehicle::_internal_mutable_start_location() {
  
  if (start_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::problem::Location>(GetArenaNoVirtual());
    start_location_ = p;
  }
  return start_location_;
}
inline ::problem::Location* Vehicle::mutable_start_location() {
  // @@protoc_insertion_point(field_mutable:problem.Vehicle.start_location)
  return _internal_mutable_start_location();
}
inline void Vehicle::set_allocated_start_location(::problem::Location* start_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete start_location_;
  }
  if (start_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      start_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_location, submessage_arena);
    }
    
  } else {
    
  }
  start_location_ = start_location;
  // @@protoc_insertion_point(field_set_allocated:problem.Vehicle.start_location)
}

// .problem.Location end_location = 5;
inline bool Vehicle::_internal_has_end_location() const {
  return this != internal_default_instance() && end_location_ != nullptr;
}
inline bool Vehicle::has_end_location() const {
  return _internal_has_end_location();
}
inline void Vehicle::clear_end_location() {
  if (GetArenaNoVirtual() == nullptr && end_location_ != nullptr) {
    delete end_location_;
  }
  end_location_ = nullptr;
}
inline const ::problem::Location& Vehicle::_internal_end_location() const {
  const ::problem::Location* p = end_location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::problem::Location*>(
      &::problem::_Location_default_instance_);
}
inline const ::problem::Location& Vehicle::end_location() const {
  // @@protoc_insertion_point(field_get:problem.Vehicle.end_location)
  return _internal_end_location();
}
inline ::problem::Location* Vehicle::release_end_location() {
  // @@protoc_insertion_point(field_release:problem.Vehicle.end_location)
  
  ::problem::Location* temp = end_location_;
  end_location_ = nullptr;
  return temp;
}
inline ::problem::Location* Vehicle::_internal_mutable_end_location() {
  
  if (end_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::problem::Location>(GetArenaNoVirtual());
    end_location_ = p;
  }
  return end_location_;
}
inline ::problem::Location* Vehicle::mutable_end_location() {
  // @@protoc_insertion_point(field_mutable:problem.Vehicle.end_location)
  return _internal_mutable_end_location();
}
inline void Vehicle::set_allocated_end_location(::problem::Location* end_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete end_location_;
  }
  if (end_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_location, submessage_arena);
    }
    
  } else {
    
  }
  end_location_ = end_location;
  // @@protoc_insertion_point(field_set_allocated:problem.Vehicle.end_location)
}

// double duration = 6;
inline void Vehicle::clear_duration() {
  duration_ = 0;
}
inline double Vehicle::_internal_duration() const {
  return duration_;
}
inline double Vehicle::duration() const {
  // @@protoc_insertion_point(field_get:problem.Vehicle.duration)
  return _internal_duration();
}
inline void Vehicle::_internal_set_duration(double value) {
  
  duration_ = value;
}
inline void Vehicle::set_duration(double value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:problem.Vehicle.duration)
}

// repeated int32 day_indices = 7;
inline int Vehicle::_internal_day_indices_size() const {
  return day_indices_.size();
}
inline int Vehicle::day_indices_size() const {
  return _internal_day_indices_size();
}
inline void Vehicle::clear_day_indices() {
  day_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle::_internal_day_indices(int index) const {
  return day_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle::day_indices(int index) const {
  // @@protoc_insertion_point(field_get:problem.Vehicle.day_indices)
  return _internal_day_indices(index);
}
inline void Vehicle::set_day_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  day_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:problem.Vehicle.day_indices)
}
inline void Vehicle::_internal_add_day_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  day_indices_.Add(value);
}
inline void Vehicle::add_day_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_day_indices(value);
  // @@protoc_insertion_point(field_add:problem.Vehicle.day_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Vehicle::_internal_day_indices() const {
  return day_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Vehicle::day_indices() const {
  // @@protoc_insertion_point(field_list:problem.Vehicle.day_indices)
  return _internal_day_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Vehicle::_internal_mutable_day_indices() {
  return &day_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Vehicle::mutable_day_indices() {
  // @@protoc_insertion_point(field_mutable_list:problem.Vehicle.day_indices)
  return _internal_mutable_day_indices();
}

// uint32 matrix_index = 8;
inline void Vehicle::clear_matrix_index() {
  matrix_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::_internal_matrix_index() const {
  return matrix_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::matrix_index() const {
  // @@protoc_insertion_point(field_get:problem.Vehicle.matrix_index)
  return _internal_matrix_index();
}
inline void Vehicle::_internal_set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  matrix_index_ = value;
}
inline void Vehicle::set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matrix_index(value);
  // @@protoc_insertion_point(field_set:problem.Vehicle.matrix_index)
}

// repeated string skills = 9;
inline int Vehicle::_internal_skills_size() const {
  return skills_.size();
}
inline int Vehicle::skills_size() const {
  return _internal_skills_size();
}
inline void Vehicle::clear_skills() {
  skills_.Clear();
}
inline std::string* Vehicle::add_skills() {
  // @@protoc_insertion_point(field_add_mutable:problem.Vehicle.skills)
  return _internal_add_skills();
}
inline const std::string& Vehicle::_internal_skills(int index) const {
  return skills_.Get(index);
}
inline const std::string& Vehicle::skills(int index) const {
  // @@protoc_insertion_point(field_get:problem.Vehicle.skills)
  return _internal_skills(index);
}
inline std::string* Vehicle::mutable_skills(int index) {
  // @@protoc_insertion_point(field_mutable:problem.Vehicle.skills)
  return skills_.Mutable(index);
}
inline void Vehicle::set_skills(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:problem.Vehicle.skills)
  skills_.Mutable(index)->assign(value);
}
inline void Vehicle::set_skills(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:problem.Vehicle.skills)
  skills_.Mutable(index)->assign(std::move(value));
}
inline void Vehicle::set_skills(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  skills_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:problem.Vehicle.skills)
}
inline void Vehicle::set_skills(int index, const char* value, size_t size) {
  skills_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:problem.Vehicle.skills)
}
inline std::string* Vehicle::_internal_add_skills() {
  return skills_.Add();
}
inline void Vehicle::add_skills(const std::string& value) {
  skills_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:problem.Vehicle.skills)
}
inline void Vehicle::add_skills(std::string&& value) {
  skills_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:problem.Vehicle.skills)
}
inline void Vehicle::add_skills(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  skills_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:problem.Vehicle.skills)
}
inline void Vehicle::add_skills(const char* value, size_t size) {
  skills_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:problem.Vehicle.skills)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Vehicle::skills() const {
  // @@protoc_insertion_point(field_list:problem.Vehicle.skills)
  return skills_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Vehicle::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:problem.Vehicle.skills)
  return &skills_;
}

// uint32 id = 10;
inline void Vehicle::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::id() const {
  // @@protoc_insertion_point(field_get:problem.Vehicle.id)
  return _internal_id();
}
inline void Vehicle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Vehicle::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:problem.Vehicle.id)
}

// -------------------------------------------------------------------

// Solution

// repeated int32 assignment = 1;
inline int Solution::_internal_assignment_size() const {
  return assignment_.size();
}
inline int Solution::assignment_size() const {
  return _internal_assignment_size();
}
inline void Solution::clear_assignment() {
  assignment_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Solution::_internal_assignment(int index) const {
  return assignment_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Solution::assignment(int index) const {
  // @@protoc_insertion_point(field_get:problem.Solution.assignment)
  return _internal_assignment(index);
}
inline void Solution::set_assignment(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  assignment_.Set(index, value);
  // @@protoc_insertion_point(field_set:problem.Solution.assignment)
}
inline void Solution::_internal_add_assignment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  assignment_.Add(value);
}
inline void Solution::add_assignment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_assignment(value);
  // @@protoc_insertion_point(field_add:problem.Solution.assignment)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Solution::_internal_assignment() const {
  return assignment_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Solution::assignment() const {
  // @@protoc_insertion_point(field_list:problem.Solution.assignment)
  return _internal_assignment();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Solution::_internal_mutable_assignment() {
  return &assignment_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Solution::mutable_assignment() {
  // @@protoc_insertion_point(field_mutable_list:problem.Solution.assignment)
  return _internal_mutable_assignment();
}

// -------------------------------------------------------------------

// Problem

// repeated .problem.Vehicle vehicles = 1;
inline int Problem::_internal_vehicles_size() const {
  return vehicles_.size();
}
inline int Problem::vehicles_size() const {
  return _internal_vehicles_size();
}
inline void Problem::clear_vehicles() {
  vehicles_.Clear();
}
inline ::problem::Vehicle* Problem::mutable_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:problem.Problem.vehicles)
  return vehicles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Vehicle >*
Problem::mutable_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:problem.Problem.vehicles)
  return &vehicles_;
}
inline const ::problem::Vehicle& Problem::_internal_vehicles(int index) const {
  return vehicles_.Get(index);
}
inline const ::problem::Vehicle& Problem::vehicles(int index) const {
  // @@protoc_insertion_point(field_get:problem.Problem.vehicles)
  return _internal_vehicles(index);
}
inline ::problem::Vehicle* Problem::_internal_add_vehicles() {
  return vehicles_.Add();
}
inline ::problem::Vehicle* Problem::add_vehicles() {
  // @@protoc_insertion_point(field_add:problem.Problem.vehicles)
  return _internal_add_vehicles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Vehicle >&
Problem::vehicles() const {
  // @@protoc_insertion_point(field_list:problem.Problem.vehicles)
  return vehicles_;
}

// repeated .problem.Service services = 2;
inline int Problem::_internal_services_size() const {
  return services_.size();
}
inline int Problem::services_size() const {
  return _internal_services_size();
}
inline void Problem::clear_services() {
  services_.Clear();
}
inline ::problem::Service* Problem::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:problem.Problem.services)
  return services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Service >*
Problem::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:problem.Problem.services)
  return &services_;
}
inline const ::problem::Service& Problem::_internal_services(int index) const {
  return services_.Get(index);
}
inline const ::problem::Service& Problem::services(int index) const {
  // @@protoc_insertion_point(field_get:problem.Problem.services)
  return _internal_services(index);
}
inline ::problem::Service* Problem::_internal_add_services() {
  return services_.Add();
}
inline ::problem::Service* Problem::add_services() {
  // @@protoc_insertion_point(field_add:problem.Problem.services)
  return _internal_add_services();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Service >&
Problem::services() const {
  // @@protoc_insertion_point(field_list:problem.Problem.services)
  return services_;
}

// repeated .problem.Matrix matrices = 3;
inline int Problem::_internal_matrices_size() const {
  return matrices_.size();
}
inline int Problem::matrices_size() const {
  return _internal_matrices_size();
}
inline void Problem::clear_matrices() {
  matrices_.Clear();
}
inline ::problem::Matrix* Problem::mutable_matrices(int index) {
  // @@protoc_insertion_point(field_mutable:problem.Problem.matrices)
  return matrices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Matrix >*
Problem::mutable_matrices() {
  // @@protoc_insertion_point(field_mutable_list:problem.Problem.matrices)
  return &matrices_;
}
inline const ::problem::Matrix& Problem::_internal_matrices(int index) const {
  return matrices_.Get(index);
}
inline const ::problem::Matrix& Problem::matrices(int index) const {
  // @@protoc_insertion_point(field_get:problem.Problem.matrices)
  return _internal_matrices(index);
}
inline ::problem::Matrix* Problem::_internal_add_matrices() {
  return matrices_.Add();
}
inline ::problem::Matrix* Problem::add_matrices() {
  // @@protoc_insertion_point(field_add:problem.Problem.matrices)
  return _internal_add_matrices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::problem::Matrix >&
Problem::matrices() const {
  // @@protoc_insertion_point(field_list:problem.Problem.matrices)
  return matrices_;
}

// .problem.Solution solutions = 4;
inline bool Problem::_internal_has_solutions() const {
  return this != internal_default_instance() && solutions_ != nullptr;
}
inline bool Problem::has_solutions() const {
  return _internal_has_solutions();
}
inline void Problem::clear_solutions() {
  if (GetArenaNoVirtual() == nullptr && solutions_ != nullptr) {
    delete solutions_;
  }
  solutions_ = nullptr;
}
inline const ::problem::Solution& Problem::_internal_solutions() const {
  const ::problem::Solution* p = solutions_;
  return p != nullptr ? *p : *reinterpret_cast<const ::problem::Solution*>(
      &::problem::_Solution_default_instance_);
}
inline const ::problem::Solution& Problem::solutions() const {
  // @@protoc_insertion_point(field_get:problem.Problem.solutions)
  return _internal_solutions();
}
inline ::problem::Solution* Problem::release_solutions() {
  // @@protoc_insertion_point(field_release:problem.Problem.solutions)
  
  ::problem::Solution* temp = solutions_;
  solutions_ = nullptr;
  return temp;
}
inline ::problem::Solution* Problem::_internal_mutable_solutions() {
  
  if (solutions_ == nullptr) {
    auto* p = CreateMaybeMessage<::problem::Solution>(GetArenaNoVirtual());
    solutions_ = p;
  }
  return solutions_;
}
inline ::problem::Solution* Problem::mutable_solutions() {
  // @@protoc_insertion_point(field_mutable:problem.Problem.solutions)
  return _internal_mutable_solutions();
}
inline void Problem::set_allocated_solutions(::problem::Solution* solutions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete solutions_;
  }
  if (solutions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      solutions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solutions, submessage_arena);
    }
    
  } else {
    
  }
  solutions_ = solutions;
  // @@protoc_insertion_point(field_set_allocated:problem.Problem.solutions)
}

// repeated string unit_labels = 5;
inline int Problem::_internal_unit_labels_size() const {
  return unit_labels_.size();
}
inline int Problem::unit_labels_size() const {
  return _internal_unit_labels_size();
}
inline void Problem::clear_unit_labels() {
  unit_labels_.Clear();
}
inline std::string* Problem::add_unit_labels() {
  // @@protoc_insertion_point(field_add_mutable:problem.Problem.unit_labels)
  return _internal_add_unit_labels();
}
inline const std::string& Problem::_internal_unit_labels(int index) const {
  return unit_labels_.Get(index);
}
inline const std::string& Problem::unit_labels(int index) const {
  // @@protoc_insertion_point(field_get:problem.Problem.unit_labels)
  return _internal_unit_labels(index);
}
inline std::string* Problem::mutable_unit_labels(int index) {
  // @@protoc_insertion_point(field_mutable:problem.Problem.unit_labels)
  return unit_labels_.Mutable(index);
}
inline void Problem::set_unit_labels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:problem.Problem.unit_labels)
  unit_labels_.Mutable(index)->assign(value);
}
inline void Problem::set_unit_labels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:problem.Problem.unit_labels)
  unit_labels_.Mutable(index)->assign(std::move(value));
}
inline void Problem::set_unit_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unit_labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:problem.Problem.unit_labels)
}
inline void Problem::set_unit_labels(int index, const char* value, size_t size) {
  unit_labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:problem.Problem.unit_labels)
}
inline std::string* Problem::_internal_add_unit_labels() {
  return unit_labels_.Add();
}
inline void Problem::add_unit_labels(const std::string& value) {
  unit_labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:problem.Problem.unit_labels)
}
inline void Problem::add_unit_labels(std::string&& value) {
  unit_labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:problem.Problem.unit_labels)
}
inline void Problem::add_unit_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unit_labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:problem.Problem.unit_labels)
}
inline void Problem::add_unit_labels(const char* value, size_t size) {
  unit_labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:problem.Problem.unit_labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Problem::unit_labels() const {
  // @@protoc_insertion_point(field_list:problem.Problem.unit_labels)
  return unit_labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Problem::mutable_unit_labels() {
  // @@protoc_insertion_point(field_mutable_list:problem.Problem.unit_labels)
  return &unit_labels_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace problem

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_problem_2eproto
